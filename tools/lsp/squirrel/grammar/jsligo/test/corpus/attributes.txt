//=========
//sum
//=========
//
//type foo = /* @boom */ | ["True"] | ["False"]
//
//----
//
//=========
//constr
//=========
//
//type foo = /* @boom */ ["True"] | ["False"]
//
//----
//
//
=========
constr with bar
=========

type foo = | /* @boom */ ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (variant
          (attr)
          (ConstrName))
        (variant
          (ConstrName)))))

=========
record
=========

type person = /* @layout:comb */ {
  name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (object_type
      (attr)
      (field_decl
        (FieldName)
        (type_annotation
          (TypeName))))))

=========
field twice
=========

type person = {
  /* @foo *//* @bar */ name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (object_type
      (field_decl
        (attr)
        (attr)
        (FieldName)
        (type_annotation (TypeName))))))

=========
let decl
=========

/* @annot */ let x : int = 1;

---

(source_file
  (let_decl
    (attr)
    (var_pattern (Name))
    (type_annotation (TypeName))
    (expr
      (expr_statement (Int)))))

=========
let decl twice
=========

/* @annot1 *//* @annot2 */ let x : int = 1;

---

(source_file
  (let_decl
    (attr)
    (attr)
    (var_pattern (Name))
    (type_annotation (TypeName))
    (expr
      (expr_statement (Int)))))

=========
let expr
=========

let bar = (b : int) : int => {
  /* @foo *//* @bar */
  let test = 2;
  return test;
};


---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (fun_expr
          (parameters
            (parameter
              (expr
                (expr_statement (Name)))
              (type_annotation (TypeName))))
          (type_annotation
            (TypeName))
              (body
          (statements
            (let_decl (attr) (attr)
              (var_pattern (Name))
              (expr
                (expr_statement (Int))))
            (return_statement
              (expr
                (expr_statement (Name)))))))))))
