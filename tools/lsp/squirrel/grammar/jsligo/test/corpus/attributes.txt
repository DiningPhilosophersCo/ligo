=========
constr
=========

type foo = /* @boom */ ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (variant
          (attr)
          (String))
        (variant
          (String)))))

=========
sum
=========

type foo = /* @boom */ | ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (attr)
        (variant (String))
        (variant (String)))))

=========
constr with bar
=========

type foo = | /* @boom */ ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (variant
          (attr)
          (String))
        (variant
          (String)))))

=========
record
=========

type person = /* @layout:comb */ {
  name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (attr)
      (field_decl
        (FieldName)
        (TypeName)))))

=========
field twice
=========

type person = {
  /* @foo *//* @bar */ name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (field_decl
        (attr)
        (attr)
        (FieldName)
        (TypeName)))))

=========
let decl
=========

/* @annot */ let x : int = 1;

---

(source_file
  (attr)
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
let decl twice
=========

/* @annot1 *//* @annot2 */ let x : int = 1;

---

(source_file
  (attr)
  (attr)
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
let expr
=========

let bar = (b : int) : int => {
  /* @foo *//* @bar */
  let test = 2;
  return test;
};

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (TypeName)
      (body
        (block_statement
          (attr) (attr)
          (let_decl
            (var_pattern (NameDecl))
            (Int))
          (return_statement (Name)))))))

=========
const expr
=========

const bar = (b : int) : int => {
  /* @foo *//* @bar */
  const test = 2;
  return test;
};

---

(source_file
  (const_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (TypeName)
      (body
        (block_statement
          (attr) (attr)
          (const_decl
            (var_pattern (NameDecl))
            (Int))
          (return_statement (Name)))))))

=========
const decl
=========

/* @annot */ const x : int = 1;

---

(source_file
  (attr)
  (const_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
const decl twice
=========

/* @annot1 *//* @annot2 */ const x : int = 1;

---

(source_file
  (attr)
  (attr)
  (const_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
inline annotation
=========

// @inline
const fst = (p: [nat, nat]): nat => p[0];

---

(source_file
  (attr)
  (const_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg 
        (var_pattern (NameDecl))
        (tuple_type (TypeName) (TypeName)))
        (TypeName)
        (body
          (data_projection
            (Name)
            (Int))))))

=========
variant type layout:comb annotation
=========

type animal =
// @layout:comb
| ["Elephant"]
| ["Dog"]
| ["Cat"];

---

(source_file
  (type_decl (TypeName)
  (sum_type
    (attr)
    (variant (String))
    (variant (String))
    (variant (String)))))

=========
recod type layout:comb annotation
=========

type artist =
// @layout:comb
{
  genre : string,
  since : timestamp,
  name  : string
};

---

(source_file
  (type_decl
    (TypeName)
    (record_type
      (attr)
      (field_decl (FieldName) (TypeName))
      (field_decl (FieldName) (TypeName))
      (field_decl (FieldName) (TypeName)))))

=========
variant type @annot
=========

type animal =
| /* @annot:memory */ ["Elephant"]
| /* @annot:face */ ["Dog"]
| /* @annot:fish */ ["Cat"]

---

(source_file
  (type_decl
    (TypeName)
    (sum_type
      (variant (attr) (String))
      (variant (attr) (String))
      (variant (attr) (String)))))

=========
record type @annot
=========

type artist = {
  /* @annot:style */ genre: string,
  /* @annot:from */ since: timestamp,
  /* @annot:performer */ name: string
}

---

(source_file
  (type_decl
    (TypeName)
    (record_type
      (field_decl (attr) (FieldName) (TypeName))
      (field_decl (attr) (FieldName) (TypeName))
      (field_decl (attr) (FieldName) (TypeName)))))