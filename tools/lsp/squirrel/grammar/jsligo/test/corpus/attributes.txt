=========
sum
=========

type foo = /* @boom */ | ["True"] | ["False"]

----

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (type_decl
            (TypeName)
            (type_expr
              (sum_type
                (attr)
                (variant
                  (ConstrName))
                (variant
                  (ConstrName))))))))))

//=========
//constr
//=========
//
//type foo = /* @boom */ ["True"] | ["False"]
//
//----
//
//(source_file
//  (statement_or_namespace
//    (statement
//      (base_statement
//        (declaration_statement
//          (type_decl
//            (TypeName)
//            (type_expr
//              (sum_type
//                (attr)
//                (variant
//                  (ConstrName))
//                (variant
//                  (ConstrName))))))))))
//
//
=========
constr with bar
=========

type foo = | /* @boom */ ["True"] | ["False"]

----

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (type_decl
            (TypeName)
            (type_expr
              (sum_type
                (variant
                  (attr)
                  (ConstrName))
                (variant
                  (ConstrName))))))))))

=========
record
=========

type person = /* @layout:comb */ {
  name: string,
}

----

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (type_decl
            (TypeName)
            (type_expr
              (core_type
                (object_type
                  (attr)
                  (field_decl
                    (FieldName)
                    (type_annotation
                      (type_expr
                        (core_type
                          (TypeName))))))))))))))

=========
field twice
=========

type person = {
  /* @foo *//* @bar */ name: string,
}

----

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (type_decl
            (TypeName)
            (type_expr
              (core_type
                (object_type
                  (field_decl
                    (attr)
                    (attr)
                    (FieldName)
                    (type_annotation
                      (type_expr
                        (core_type
                          (TypeName))))))))))))))

=========
let decl
=========

/* @annot */ let x : int = 1;

---

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (let_decl
            (attr)
            (binding_list
              (binding_initializer
                (binding_pattern
                  (var_pattern
                    (Name)))
                (type_annotation
                  (type_expr
                    (core_type
                      (TypeName))))
                (expr
                  (expr_statement
                    (assignment_expr_level
                      (disjunction_expr_level
                        (conjunction_expr_level
                          (comparison_expr_level
                            (addition_expr_level
                              (multiplication_expr_level
                                (unary_expr_level
                                  (call_expr_level
                                    (member_expr
                                      (Int))))))))))))))))))))

=========
let decl twice
=========

/* @annot1 *//* @annot2 */ let x : int = 1;

---

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (let_decl
            (attr)
            (attr)
            (binding_list
              (binding_initializer
                (binding_pattern
                  (var_pattern
                    (Name)))
                (type_annotation
                  (type_expr
                    (core_type
                      (TypeName))))
                (expr
                  (expr_statement
                    (assignment_expr_level
                      (disjunction_expr_level
                        (conjunction_expr_level
                          (comparison_expr_level
                            (addition_expr_level
                              (multiplication_expr_level
                                (unary_expr_level
                                  (call_expr_level
                                    (member_expr
                                      (Int))))))))))))))))))))

=========
let expr
=========

let bar = (b : int) : int => {
  /* @foo *//* @bar */
  let test = 2;
  return test;
};


---

(source_file
  (statement_or_namespace
    (statement
      (base_statement
        (declaration_statement
          (let_decl
            (binding_list
              (binding_initializer
                (binding_pattern
                  (var_pattern
                    (Name)))
                (expr
                  (expr_statement
                    (fun_expr
                      (parameters
                        (parameter
                          (expr
                            (expr_statement
                              (assignment_expr_level
                                (disjunction_expr_level
                                  (conjunction_expr_level
                                    (comparison_expr_level
                                      (addition_expr_level
                                        (multiplication_expr_level
                                          (unary_expr_level
                                            (call_expr_level
                                              (member_expr
                                                (Name))))))))))))
                          (type_annotation
                            (type_expr
                              (core_type
                                (TypeName))))))
                      (type_annotation
                        (type_expr
                          (core_type
                            (TypeName))))
                      (body
                        (statements
                          (statement
                            (base_statement
                              (declaration_statement
                                (let_decl
                                  (attr)
                                  (attr)
                                  (binding_list
                                    (binding_initializer
                                      (binding_pattern
                                        (var_pattern
                                          (Name)))
                                      (expr
                                        (expr_statement
                                          (assignment_expr_level
                                            (disjunction_expr_level
                                              (conjunction_expr_level
                                                (comparison_expr_level
                                                  (addition_expr_level
                                                    (multiplication_expr_level
                                                      (unary_expr_level
                                                        (call_expr_level
                                                          (member_expr
                                                            (Int))))))))))))))))))
                          (statement
                            (base_statement
                              (return_statement
                                (expr
                                  (expr_statement
                                    (assignment_expr_level
                                      (disjunction_expr_level
                                        (conjunction_expr_level
                                          (comparison_expr_level
                                            (addition_expr_level
                                              (multiplication_expr_level
                                                (unary_expr_level
                                                  (call_expr_level
                                                    (member_expr
                                                      (Name))))))))))))))))))))))))))))