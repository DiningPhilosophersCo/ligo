=========
constr
=========

type foo = /* @boom */ ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (variant
          (attr)
          (String))
        (variant
          (String)))))

=========
sum
=========

type foo = /* @boom */ | ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (attr)
        (variant (String))
        (variant (String)))))

=========
constr with bar
=========

type foo = | /* @boom */ ["True"] | ["False"]

----

(source_file
  (type_decl
    (TypeName)
      (sum_type
        (variant
          (attr)
          (String))
        (variant
          (String)))))

=========
record
=========

type person = /* @layout:comb */ {
  name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (attr)
      (field_decl
        (FieldName)
        (TypeName)))))

=========
field twice
=========

type person = {
  /* @foo *//* @bar */ name: string,
}

----

(source_file
  (type_decl
    (TypeName)
    (record_type
      (field_decl
        (attr)
        (attr)
        (FieldName)
        (TypeName)))))

=========
let decl
=========

/* @annot */ let x : int = 1;

---

(source_file
  (attr)
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
let decl twice
=========

/* @annot1 *//* @annot2 */ let x : int = 1;

---

(source_file
  (attr)
  (attr)
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
let expr
=========

let bar = (b : int) : int => {
  /* @foo *//* @bar */
  let test = 2;
  return test;
};

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (fun_expr
      (parameter
        (Name)
        (TypeName))
      (TypeName)
      (body
        (attr) (attr)
        (let_decl 
          (var_pattern (NameDecl))
          (Int))
        (return_statement
          (Name))))))

=========
const expr
=========

const bar = (b : int) : int => {
  /* @foo *//* @bar */
  const test = 2;
  return test;
};

---

(source_file
  (const_decl
    (var_pattern (NameDecl))
    (fun_expr
      (parameter
        (Name)
        (TypeName))
      (TypeName)
      (body
        (attr) (attr)
        (const_decl 
          (var_pattern (NameDecl))
          (Int))
        (return_statement
          (Name))))))

=========
const decl
=========

/* @annot */ const x : int = 1;

---

(source_file
  (attr)
  (const_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))

=========
const decl twice
=========

/* @annot1 *//* @annot2 */ const x : int = 1;

---

(source_file
  (attr)
  (attr)
  (const_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Int)))
