=========
record type decl
=========

type user = {
  id       : nat,
  is_admin : bool,
  name     : string
};

---

(source_file
  (type_decl
    (TypeName)
      (record_type
        (field_decl
          (FieldName) (TypeName))
        (field_decl
          (FieldName) (TypeName))
        (field_decl
          (FieldName) (TypeName)))))

=========
record value decl
=========

let alice : user = {
  id       : 1 as nat,
  is_admin : true,
  name     : "Alice"
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (TypeName)
    (object_literal
      (property
        (property_name (Name))
        (type_as_annotation (Int) (TypeName)))
      (property
        (property_name (Name))
        (True_kwd))
      (property
        (property_name (Name))
        (String)))))

=========
record field access
=========

let alice_admin: bool = alice.is_admin;

---

(source_file
  (let_decl
    (var_pattern (Name))
    (TypeName)
    (projection (Name) (Name))))

=========
tuple type decl
=========

type full_name = [string, string]

---

(source_file
  (type_decl
    (TypeName)
    (type_tuple (TypeName) (TypeName))))

=========
tuple value decl
=========

let full_name: full_name = ["Alice", "Johnson"];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (TypeName)
    (array_literal
      (String)
      (String))))

=========
tuple desctructuring
=========

let [first_name, last_name]: full_name = full_name;

---

(source_file
  (let_decl
    (array_pattern
      (var_pattern (Name))
      (var_pattern (Name)))
    (TypeName)
    (Name)))

=========
tuple desctructuring function
=========

let first_name_fun = ([first_name, _]: full_name):string => first_name;

---

(source_file
  (let_decl
    (var_pattern (Name))
      (fun_expr
        (parameter
          (array_literal
            (Name)
            (wildcard))
          (TypeName))
      (TypeName)
      (body (Name)))))

=========
tuple access elements
=========

let first_name_component: string = full_name[0];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (TypeName)
    (projection
      (Name)
      (Int))))