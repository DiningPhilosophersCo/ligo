=========
record type decl
=========

type user = {
  id       : nat,
  is_admin : bool,
  name     : string
};

---

(source_file
  (type_decl
    (TypeName)
      (record_type
        (field_decl
          (FieldName) (TypeName))
        (field_decl
          (FieldName) (TypeName))
        (field_decl
          (FieldName) (TypeName)))))

=========
record value decl
=========

let alice : user = {
  id       : 1 as nat,
  is_admin : true,
  name     : "Alice"
};

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (record
      (record_field
        (property_name (Name))
        (Nat))
      (record_field
        (property_name (Name))
        (True_kwd))
      (record_field
        (property_name (Name))
        (String)))))

=========
record field access
=========

let alice_admin: bool = alice.is_admin;

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (data_projection (Name) (Name))))

=========
record field punning
=========

let alice : user = {
  id,
  is_admin,
  name
};

---

(source_file
  (let_decl
    (var_pattern
      (NameDecl))
      (TypeName)
      (record
        (capture (Name))
        (capture (Name))
        (capture (Name)))))

=========
record update & punning
=========

let alice : user = {
  ...bob,
  is_admin,
  name     : "Alice"
};

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (record_update
      (spread (Name))
      (capture (Name))
      (record_field (property_name (Name)) (String)))))

=========
record desctructuring
=========

let { a , b } = x ; 

---

(source_file
  (let_decl
    (record_pattern
      (record_capture_pattern (NameDecl))
      (record_capture_pattern (NameDecl)))
    (Name)))

=========
tuple type decl
=========

type full_name = [string, string]

---

(source_file
  (type_decl
    (TypeName)
    (tuple_type (TypeName) (TypeName))))

=========
tuple value decl
=========

let full_name: full_name = ["Alice", "Johnson"];

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (tuple
      (String)
      (String))))

=========
tuple desctructuring
=========

let [first_name, last_name]: full_name = full_name;

---

(source_file
  (let_decl
    (tuple_pattern
      (var_pattern (NameDecl))
      (var_pattern (NameDecl)))
    (TypeName)
    (Name)))

=========
tuple desctructuring function
=========

let first_name_fun = ([first_name, _]: full_name):string => first_name;

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
      (lambda
        (fun_arg
          (tuple_pattern
            (var_pattern (NameDecl))
            (wildcard))
          (TypeName))
      (TypeName)
      (body (Name)))))

=========
tuple access elements
=========

let first_name_component: string = full_name[0];

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (data_projection
      (Name)
      (Int))))

=========
tuple access multiple
=========

let x = y[0][1][2]

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (data_projection 
      (data_projection 
        (data_projection (Name) (Int)) (Int)) (Int))))
