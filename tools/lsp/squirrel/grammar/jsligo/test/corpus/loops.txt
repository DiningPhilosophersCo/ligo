=========
loops: for-of loop
=========

let sum_list = (l: list<int>): int => {
  let total : int = 0;
  for (const i of l) {
    total = total + i
  };
  return total
}

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (Name)
        (app_type (TypeName) (TypeName)))
      (TypeName)
      (body
        (let_decl
          (var_pattern (NameDecl))
          (TypeName)
          (Int))
        (for_of_statement
          (Const_kwd)
          (Name)
          (Name)
          (block_statement
            (assignment_operator
              (Name)
              (binary_call (Name) (Name)))))
        (return_statement (Name))))))

=========
loops: while loop
=========

let gcd = (x: nat, y: nat): nat => {
  let [x,y] = [x,y];
  if (x < y) {
    const z: nat = x;
    x = y; y = z;
  };
  let r: nat = 0 as nat;
  while (y != (0 as nat)) {
    r = x % y;
    x = y;
    y = r;
  };
  return x;
};

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (Name)
        (TypeName))
      (fun_arg
        (Name)
        (TypeName))
      (TypeName)
      (body
        (let_decl
          (array_pattern
            (var_pattern (NameDecl))
            (var_pattern (NameDecl)))
          (tuple (Name) (Name)))
        (if_statement
          (binary_call (Name) (Name))
          (block_statement
            (const_decl
              (var_pattern (NameDecl))
              (TypeName)
              (Name))
            (assignment_operator (Name) (Name))
            (assignment_operator (Name) (Name))))
        (let_decl
          (var_pattern (NameDecl))
          (TypeName)
          (Nat))
        (while_statement
          (binary_call
            (Name)
            (paren_expr
              (Nat)))
          (block_statement
            (assignment_operator (Name) (binary_call (Name) (Name)))
            (assignment_operator (Name) (Name))
            (assignment_operator (Name) (Name))))
        (return_statement
          (Name))))))