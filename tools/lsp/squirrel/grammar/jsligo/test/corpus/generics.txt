=========
generic type
=========

type my_typ<A,B,C> =
      ["First", A]
    | ["Second", B]
    | ["Third", C]

---

(source_file
  (type_decl
    (TypeName)
      (type_params (TypeVariableName) (TypeVariableName) (TypeVariableName))
      (sum_type
        (variant (String) (TypeName))
        (variant (String) (TypeName))
        (variant (String) (TypeName)))))

=========
generic function
=========

let id : <T>((x : T) => T) = x => x;

---

(source_file
  (let_decl
    (var_pattern (Name))
    (type_params (TypeVariableName))
    (fun_type (TypeName) (TypeName))
    (fun_expr
      (Name)
      (body (Name)))))

=========
type application
=========

type x_y_z_typ = my_typ<X, yield, Z>

---

(source_file
  (type_decl (TypeName)
    (app_type
      (TypeName) (TypeName) (TypeName) (TypeName))))