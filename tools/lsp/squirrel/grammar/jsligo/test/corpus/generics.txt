=========
generic type
=========

type my_typ<A,B,C> =
      ["First", A]
    | ["Second", B]
    | ["Third", C]

---

(source_file
  (type_decl
    (TypeName)
      (type_params (var_type (TypeVariableName)) (var_type (TypeVariableName)) (var_type (TypeVariableName)))
      (sum_type
        (variant (String) (TypeName))
        (variant (String) (TypeName))
        (variant (String) (TypeName)))))

=========
generic function
=========

let id : <T>((x : T) => T) = x => x;

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (type_params (var_type (TypeVariableName)))
    (fun_type (TypeName) (TypeName))
    (lambda
      (Name)
      (body (Name)))))

=========
type application
=========

type x_y_z_typ = my_typ<X, yield, Z>

---

(source_file
  (type_decl (TypeName)
    (app_type
      (TypeName) (TypeName) (TypeName) (TypeName))))

=========
nested generic functions
=========

const id : <P>(x : P) => P = (x : P) => {
    const id_1 : <Q>(y : Q) => Q = (y : Q) => {
        let id_2 : <R>(z : R) => R = (z : R) => {
            let z = z;
            return z;
        };
        let y = y;
        return id_2(y);
    }
    return id_1(x);
};
