=========
paren
=========

let x = (foo (42))

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (expr
          (expr_statement
            (lambda (Name))
            (expr
              (expr_statement
                (Int)))))))))

=========
tuple
=========

let x = [1, "foo", 3]

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (array_literal
          (array_item
            (expr
              (expr_statement (Int))))
          (array_item
            (expr
              (expr_statement (String))))
          (array_item
            (expr
              (expr_statement (Int)))))))))

=========
single paren
=========

let x = (1);

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (expr
          (expr_statement
            (Int)))))))

=========
tuples and parens
=========

let x = ([1, "foo", 3]);
let y = [(1), ("foo"), 3];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (expr
          (expr_statement
            (array_literal
              (array_item
                (expr
                  (expr_statement (Int))))
              (array_item
                (expr
                  (expr_statement (String))))
              (array_item
                (expr
                  (expr_statement (Int))))))))))
  (let_decl
    (var_pattern (Name))
    (expr
      (expr_statement
        (array_literal
          (array_item
            (expr
              (expr_statement
                (expr
                  (expr_statement (Int))))))
          (array_item
            (expr
              (expr_statement
                (expr
                  (expr_statement (String))))))
          (array_item
            (expr
              (expr_statement (Int)))))))))