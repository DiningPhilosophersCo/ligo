=========
paren
=========

let x = (foo (42))

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (paren_expr
      (apply
        (lambda (Name))
        (arguments (Int))))))

=========
tuple
=========

let x = [1, "foo", 3]

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (array_literal
      (Int)
      (String)
      (Int))))

=========
single paren
=========

let x = (1);

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (paren_expr
      (Int))))

=========
tuples and parens
=========

let x = ([1, "foo", 3]);
let y = [(1), ("foo"), 3];

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (paren_expr
      (array_literal
        (Int)
        (String)
        (Int))))
  (let_decl
    (var_pattern (NameDecl))
    (array_literal
      (paren_expr (Int))
      (paren_expr (String))
      (Int))))

=========
unit type & value
=========

let n : unit = unit;

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (TypeName)
    (Unit_kwd)))

=========
nat decl
=========

let n = 1 as nat

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (Nat)))

=========
tez decl
=========

let n = 1 as tez
let m = 2 as mutez

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (Tez))
  (let_decl
    (var_pattern (NameDecl))
    (Tez)))

=========
list literal
=========

let empty_list: list<int> = list([]);
let my_list: list<int> = list([1, 2, 2]);

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (app_type (TypeName) (TypeName))
    (list (array_literal)))
  (let_decl
    (var_pattern (NameDecl))
    (app_type (TypeName) (TypeName))
    (list
      (array_literal (Int) (Int) (Int)))))