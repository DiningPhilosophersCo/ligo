=========
paren
=========

let x = (foo (42))

---

(source_file
  (let_decl
    (var_pattern (Name))
    (paren_expr
      (call_expr
        (lambda (Name))
        (arguments (Int))))))

=========
tuple
=========

let x = [1, "foo", 3]

---

(source_file
  (let_decl
    (var_pattern (Name))
    (array_literal
      (Int)
      (String)
      (Int))))

=========
single paren
=========

let x = (1);

---

(source_file
  (let_decl
    (var_pattern (Name))
    (paren_expr
      (Int))))

=========
tuples and parens
=========

let x = ([1, "foo", 3]);
let y = [(1), ("foo"), 3];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (paren_expr
      (array_literal
        (Int)
        (String)
        (Int))))
  (let_decl
    (var_pattern (Name))
    (array_literal
      (paren_expr (Int))
      (paren_expr (String))
      (Int))))

=========
unit type & value
=========

let n : unit = unit;

---

(source_file
  (let_decl
    (var_pattern (Name))
    (type_annotation (TypeName))
    (Unit_kwd)))