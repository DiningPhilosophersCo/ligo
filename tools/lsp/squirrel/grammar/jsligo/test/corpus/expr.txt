=========
paren
=========

let x = (foo (42))

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr
          (call_expr
            (lambda (Name))
            (expr (Int))))))))

=========
tuple
=========

let x = [1, "foo", 3]

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (array_literal
        (expr (Int))
        (expr (String))
        (expr (Int))))))

=========
single paren
=========

let x = (1);

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr (Int))))))

=========
tuples and parens
=========

let x = ([1, "foo", 3]);
let y = [(1), ("foo"), 3];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr
          (array_literal
            (expr (Int))
            (expr (String))
            (expr (Int)))))))
  (let_decl
    (var_pattern (Name))
    (expr
      (array_literal
        (expr
          (paren_expr
            (expr (Int))))
        (expr
          (paren_expr
            (expr (String))))
        (expr (Int))))))
