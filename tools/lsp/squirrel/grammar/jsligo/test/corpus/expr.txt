=========
paren
=========

let x = (foo (42))

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr 
          (lambda (Name))
          (expr (Int)))))))

=========
tuple
=========

let x = [1, "foo", 3]

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (array_literal
        (array_item
          (expr (Int)))
        (array_item
          (expr (String)))
        (array_item
          (expr (Int)))))))

=========
single paren
=========

let x = (1);

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr (Int))))))

=========
tuples and parens
=========

let x = ([1, "foo", 3]);
let y = [(1), ("foo"), 3];

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (paren_expr
        (expr
          (array_literal
            (array_item
              (expr (Int)))
            (array_item
              (expr (String)))
            (array_item
              (expr (Int))))))))
  (let_decl
    (var_pattern (Name))
    (expr
      (array_literal
        (array_item
          (expr
            (paren_expr
              (expr (Int)))))
        (array_item
          (expr
            (paren_expr
              (expr (String)))))
        (array_item
          (expr (Int)))))))

=========
binary operator
=========

let x = 1 + 2;

---

(source_file
  (let_decl
    (var_pattern
      (Name))
    (expr
      (binary_operator (Int) (Int)))))