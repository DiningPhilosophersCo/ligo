=========
modules
=========

namespace EURO {
    export type t = nat;
    export let one : t = 1 as nat;
    export namespace CONST {
        let zero : t = 0 as nat;
        let one : t = 1 as nat;
    };
};

import US_DOLLAR = EURO;

type storage = EURO.t;
let uno : storage = EURO.one;

let foo = x as my_typ;

---
(source_file
  (namespace_statement (ModuleName)
    (type_decl (TypeName) (TypeName))
    (let_or_const
      (var_pattern (NameDecl))
      (TypeName)
      (Nat))
    (namespace_statement (ModuleName)
      (let_or_const
        (var_pattern (NameDecl))
        (TypeName)
        (Nat))
      (let_or_const
        (var_pattern (NameDecl))
        (TypeName)
        (Nat))))
  (import_statement (ModuleName) (ModuleName))
  (type_decl
    (TypeName)
    (module_access_t
      (ModuleName)
      (Name)))
  (let_or_const
    (var_pattern (NameDecl))
    (TypeName)
    (module_access (ModuleName) (FieldName)))
  (let_or_const
    (var_pattern (NameDecl))
    (type_as_annotation (Name) (TypeName))))

=========
nested function calls
=========

let x : int = foo(bar(baz(1)))

----

(source_file
  (let_or_const
    (var_pattern (NameDecl))
    (TypeName)
    (apply
      (Name)
      (apply
        (Name)
          (apply
            (Name) (Int))))))

=========
module access function call
=========

let x : int = int(List.List.List.length(x))

---

(source_file
  (let_or_const
    (var_pattern (NameDecl))
    (TypeName)
    (apply
      (Name)
      (apply
        (module_access (ModuleName) (ModuleName) (ModuleName) (FieldName))
        (Name)))))

=========
automatic semicolon insertion
=========

namespace EURO {
    export type t = nat;
}

import US_DOLLAR = EURO

type storage = EURO.t
let uno : storage = EURO.one

let foo = () : int => 1

---

(source_file
  (namespace_statement (ModuleName)
    (type_decl (TypeName) (TypeName)))
  (import_statement (ModuleName) (ModuleName))
  (type_decl
    (TypeName)
    (module_access_t (ModuleName) (Name)))
  (let_or_const
    (var_pattern (NameDecl))
    (TypeName)
    (module_access (ModuleName) (FieldName)))
  (let_or_const
    (var_pattern (NameDecl))
    (lambda
      (TypeName)
      (body (Int)))))