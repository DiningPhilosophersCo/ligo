=========
conditional: if
=========

let x = () => { 
  if (true) { 
    return false 
  };
  return true;  
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (body
          (if_statement
            (expr (True_kwd))
            (block_statement
              (return_statement
                (expr (False_kwd)))))
          (return_statement
            (expr (True_kwd))))))))

=========
conditional: if else
=========

let x = () => { 
  if (true) { 
    return false 
  } else { 
    return true; 
  } 
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (body
          (if_else_statement
            (expr (True_kwd))
            (block_statement
              (return_statement (expr (False_kwd))))
            (block_statement
              (return_statement (expr (True_kwd))))))))))

=========
conditional: if else if else
=========

let x = () => { 
  if (1 == 2) { 
    return false 
  } else if (2 == 3) { 
    return false; 
  } else {
    return false;
  }
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (body
          (if_else_statement
            (expr (binary_operator (Int) (Int)))
            (block_statement
              (return_statement (expr (False_kwd))))
            (if_else_statement
              (expr (binary_operator (Int) (Int)))
              (block_statement
                (return_statement (expr (False_kwd))))
              (block_statement
                (return_statement (expr (False_kwd)))))))))))

=========
conditional: switch = case + default
=========

let x = (x : string) => { 
  switch (x) {
    case "true": {
      break;
    };
    default: {
      return false;
    }; 
  };
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (parameters
          (parameter
            (expr (Name))
            (type_annotation (TypeName))))
        (body
          (switch_statement
            (expr (Name))
            (case
              (expr (String))
                (block_statement
                  (break_statement)))
            (default_case
              (block_statement
                (return_statement (expr (False_kwd)))))))))))

=========
conditional: switch = case
=========

let x = (x : string) => { 
  switch (x) {
    case "true": {
      return false;
    };
  };
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (parameters
          (parameter
            (expr (Name))
            (type_annotation (TypeName))))
          (body
            (switch_statement
              (expr (Name))
              (case 
                (expr (String))
                (block_statement
                  (return_statement
                    (expr (False_kwd)))))))))))

=========
conditional: switch = default
=========

let x = (x : string) => { 
  switch (x) {
    default: {
      return false;
    };
  };
};

---

(source_file
  (let_decl
    (var_pattern (Name))
    (expr
      (fun_expr
        (parameters
          (parameter
            (expr (Name))
            (type_annotation (TypeName))))
        (body
          (switch_statement
            (expr (Name))
            (default_case
              (block_statement
                (return_statement
                  (expr (False_kwd)))))))))))
