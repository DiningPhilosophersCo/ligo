=========
pattern-matching: list
=========

let weird_length = (v : list<int>) : int =>
  match(v, list([
    ([] : list<int>) => -1,
    ([hd, ...tl] : list<int>) => 1 + int(length(tl))
  ]));

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (app_type (TypeName) (TypeName)))
      (TypeName)
      (body
        (pattern_match
          (Name)
          (list_case
            (list_pattern)
            (app_type (TypeName) (TypeName))
            (body (Int)))
          (list_case
            (list_pattern
              (var_pattern (NameDecl))
              (spread_pattern (var_pattern (NameDecl))))
            (app_type (TypeName) (TypeName))
            (body
              (binary_call
                (Int)
                (apply
                  (Name)
                  (apply
                    (Name)
                    (Name)))))))))))

=========
pattern-matching: constructors
=========

let int_of_color = (c : color) : int =>
  match(c, {
    RGB: (rgb : [int,int,int]) => 16 + rgb[2] + rgb[1] * 6 + rgb[0] * 36,
    Gray: (i : int) => 232 + i,
    Default: () => 0 });

---

(source_file
  (let_decl
    (var_pattern (NameDecl))
    (lambda
      (fun_arg
        (var_pattern (NameDecl))
        (TypeName))
      (TypeName)
      (body
        (pattern_match
          (Name)
          (ctor_case
            (constr_pattern
              (ConstrName)
              (ctor_param
                (var_pattern (NameDecl))
                (tuple_type (TypeName) (TypeName) (TypeName))))
            (body
              (binary_call
                (binary_call
                  (binary_call
                    (Int)
                    (indexing (Name) (Int)))
                  (binary_call
                    (indexing (Name) (Int))
                    (Int)))
                (binary_call
                  (indexing (Name) (Int))
                  (Int)))))
          (ctor_case
            (constr_pattern
              (ConstrName)
              (ctor_param (var_pattern (NameDecl)) (TypeName)))
            (body
              (binary_call (Int) (Name))))
          (ctor_case
            (constr_pattern (ConstrName))
            (body (Int))))))))